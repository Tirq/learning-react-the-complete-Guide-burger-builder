{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.module.css","components/Burger/BurgerBuildControls/BurgerBuildControl/BurgerBuildControl.module.css","components/Layout/Layout.module.css","components/Burger/Burger.module.css","components/Burger/BurgerBuildControls/BurgerBuildControls.module.css","hoc/Aux.js","components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BurgerBuildControls/BurgerBuildControl/BurgerBuildControl.js","components/Burger/BurgerBuildControls/BurgerBuildControls.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","aux","props","children","layout","Aux","className","style","Content","burgerIngredient","type","styles","Seeds1","Seeds2","burger","burgerIngredients","ingredients","length","map","ingredient","index","BurgerIngredient","key","Burger","burgerBuildControl","label","BuildControl","Label","Less","More","ingredientTypes","burgerBuildControls","BuildControls","ctrl","BurgerBuildControl","BurgerBuilder","state","this","BurgerBuildControls","Component","App","Layout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,YAAc,sCAAsC,SAAW,mCAAmC,OAAS,iCAAiC,OAAS,iCAAiC,KAAO,+BAA+B,OAAS,iCAAiC,MAAQ,gCAAgC,MAAQ,kC,gBCAxUD,EAAOC,QAAU,CAAC,aAAe,yCAAyC,MAAQ,kCAAkC,KAAO,iCAAiC,KAAO,mC,uBCAnKD,EAAOC,QAAU,CAAC,QAAU,0B,gBCA5BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,cAAgB,6C,4LCAnBC,G,MADH,SAACC,GAAD,OAAWA,EAAMC,W,iBCadC,EATA,SAACF,GAAD,OACX,kBAACG,EAAD,KACI,uFACA,0BAAMC,UAAWC,IAAMC,SAClBN,EAAMC,Y,iCCgBJM,EApBU,SAACP,GAAW,IAC1BQ,EAAS,CAACR,EAAMQ,MADS,GAUhC,MAR4B,aAATA,EAEf,yBAAKJ,UAAWK,IAAOD,IACnB,yBAAKJ,UAAWK,IAAOC,SACvB,yBAAKN,UAAWK,IAAOE,UAG3B,yBAAKP,UAAWK,IAAOD,MCShBI,EAlBA,SAACZ,GAAW,IAGjBa,EAA4C,IAF5B,CAACb,EAAMc,aADP,GAGiBC,OACnC,+DACAf,EAAMc,YAAYE,KAAI,SAACC,EAAYC,GAC/B,OAAO,kBAACC,EAAD,CAAkBX,KAAMS,EAAYG,IAAKH,EAAW,IAAIC,OAGvE,OACI,yBAAKd,UAAWK,IAAOY,QACpB,kBAACF,EAAD,CAAkBX,KAAK,aACtBK,EACD,kBAACM,EAAD,CAAkBX,KAAK,kB,iCCDnBc,EAbY,SAACtB,GAAW,IAC5BuB,EAAS,CAACvB,EAAMuB,OADW,GAGlC,OACI,yBAAKnB,UAAWK,IAAOe,cACnB,yBAAKpB,UAAWK,IAAOgB,OAAQF,GAC/B,4BAAQnB,UAAWK,IAAOiB,MAA1B,QACA,4BAAQtB,UAAWK,IAAOkB,MAA1B,UCNNC,EAAmB,CAAC,SAAU,OAAQ,QAAS,SAgBtCC,EAda,SAAC7B,GAEzB,OACI,yBAAKI,UAAWK,IAAOqB,eAEfF,EAAgBZ,KAAI,SAAAe,GAAI,OACpB,kBAACC,EAAD,CAAqBT,MAAOQ,SCQjCE,E,2MAdXC,MAAQ,CACJpB,YAAa,CAAC,SAAU,SAAU,OAAQ,OAAQ,QAAS,U,wEAI3D,OACI,kBAACX,EAAD,KACI,kBAACkB,EAAD,CAAQP,YAAaqB,KAAKD,MAAMpB,cAChC,kBAACsB,EAAD,W,GATYC,aCYbC,E,iLAVX,OACE,yBAAKlC,UAAU,OACb,kBAACmC,EAAD,KACE,kBAAC,EAAD,Y,GALQF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7e02b99a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient_BreadBottom__2US69\",\"BreadTop\":\"BurgerIngredient_BreadTop__3Y4-R\",\"Seeds1\":\"BurgerIngredient_Seeds1__J6vUJ\",\"Seeds2\":\"BurgerIngredient_Seeds2__2Ylex\",\"Meat\":\"BurgerIngredient_Meat__3flwI\",\"Cheese\":\"BurgerIngredient_Cheese__3rOTJ\",\"Salad\":\"BurgerIngredient_Salad__KLnhy\",\"Bacon\":\"BurgerIngredient_Bacon__1KK6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControl\":\"BurgerBuildControl_BuildControl__tC82o\",\"Label\":\"BurgerBuildControl_Label__1jaIx\",\"Less\":\"BurgerBuildControl_Less__1lRYs\",\"More\":\"BurgerBuildControl_More__3uSc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__2WLOk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger_Burger__10T8F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControls\":\"BurgerBuildControls_BuildControls__1M3C_\"};","const aux = (props) => props.children; \nexport default aux;","import React from 'react';\nimport Aux from '../../hoc/Aux';\nimport style from './Layout.module.css';\n\nconst layout = (props) => (\n    <Aux>\n        <div>Will be replaced with Toolbar, SideDrawer and BackDrop</div>\n        <main className={style.Content}>\n            {props.children}\n        </main>        \n    </Aux>\n);\n\nexport default layout;","import React from 'react';\nimport styles from './BurgerIngredient.module.css';\nimport PropTypes from 'prop-types';\n\nconst burgerIngredient = (props) => {\n    const [type]  = [props.type];\n    const ingredient = type === 'BreadTop'\n    ?\n        <div className={styles[type]}>\n            <div className={styles.Seeds1}></div>\n            <div className={styles.Seeds2}></div>\n        </div>\n    :\n        <div className={styles[type]}></div>;\n    return (\n        ingredient\n    )\n\n};\n\nburgerIngredient.propTypes = {\n    type: PropTypes.string.isRequired\n  };\n\nexport default burgerIngredient; \n","import React from 'react';\nimport styles from './Burger.module.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst burger = (props) => {\n    const [ingredients] = [props.ingredients];\n\n    const burgerIngredients = (ingredients.length === 0) ?\n        <p>Please start adding ingredients!</p> :\n        props.ingredients.map((ingredient, index) => {\n            return <BurgerIngredient type={ingredient} key={ingredient+'_'+index}/>\n        });\n\n    return (\n        <div className={styles.Burger}>\n           <BurgerIngredient type=\"BreadTop\"/>\n           {burgerIngredients}\n           <BurgerIngredient type=\"BreadBottom\"/>\n        </div>        \n    );\n};\n\nexport default burger;","import React from 'react';\nimport styles from './BurgerBuildControl.module.css';\n\nconst burgerBuildControl = (props) => {\n    const [label] = [props.label];\n\n    return (\n        <div className={styles.BuildControl}>\n            <div className={styles.Label}>{label}</div>\n            <button className={styles.Less}>Less</button>\n            <button className={styles.More}>More</button>\n        </div>\n    );\n\n}\n\nexport default burgerBuildControl;","import React from 'react';\nimport styles from './BurgerBuildControls.module.css';\nimport BurgerBuildControl from './BurgerBuildControl/BurgerBuildControl';\n\nconst ingredientTypes =  ['Cheese', 'Meat', 'Salad', 'Bacon'];\n\nconst burgerBuildControls = (props) => {\n\n    return (\n        <div className={styles.BuildControls}>\n            {\n                ingredientTypes.map(ctrl => (\n                    <BurgerBuildControl  label={ctrl}/>\n                ))\n            }\n        </div>\n    );\n\n}\n\nexport default burgerBuildControls;","import React, {Component} from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BurgerBuildControls from '../../components/Burger/BurgerBuildControls/BurgerBuildControls';\n\nclass BurgerBuilder extends Component {\n    state = {\n        ingredients: ['Cheese', 'Cheese', 'Meat', 'Meat', 'Salad', 'Bacon']\n    }\n\n    render () {\n        return (\n            <Aux>\n                <Burger ingredients={this.state.ingredients} />\n                <BurgerBuildControls />\n            </Aux>\n        );\n    }\n}\n\nexport default BurgerBuilder;","import React, {Component} from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <BurgerBuilder/>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}